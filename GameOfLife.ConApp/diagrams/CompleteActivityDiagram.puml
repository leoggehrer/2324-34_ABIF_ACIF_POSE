@startuml CompleteActivityDiagram
header
generated on 09.04.2024 09:47:18
end header
title CompleteActivityDiagram
start
note right:  Program.Main
#LightGreen:Params(string[] args);
#LightSkyBlue:string input\nint[,] field = new int[0, 0]\nint occupancy;
#WhiteSmoke:Console.Clear();
#WhiteSmoke:PrintLine("GameOfLife");
#WhiteSmoke:PrintLine("==========");
#WhiteSmoke:PrintLine();
#WhiteSmoke:PrintLine("1...Erstellen eines zufälligen Feldes (79 * 20 Zellen)");
#WhiteSmoke:PrintLine("2...Erstellen eines Blinkers (Blinker.csv)");
#WhiteSmoke:PrintLine("3...Erstellen eines Blinkers II (Blinker2.csv)");
#WhiteSmoke:PrintLine("4...Erstellen eines Bipols (Bipol.csv)");
#WhiteSmoke:PrintLine();
#WhiteSmoke:Print("Wählen Sie eine Option: ");
#WhiteSmoke:input = ReadLine();
if (input == "1") then (<color:green>yes)
        repeat
                #WhiteSmoke:Print($"Wieviele Zellen sollen lebendig sein <Max: {MAX_ROWS * MAX_COLS}> ? ");
                #WhiteSmoke:input = ReadLine();
        repeat while (!int.TryParse(input, out occupancy) || occupancy < 0 || occupancy > MAX_ROWS * MAX_COLS) is (<color:green>yes)
        #WhiteSmoke:field = CreateRandomField(MAX_ROWS, MAX_COLS, occupancy);
    else (<color:red>no)
        if (input == "2") then (<color:green>yes)
                #WhiteSmoke:field = ReadFieldFromCsvFile("Blinker.csv");
            else (<color:red>no)
                if (input == "3") then (<color:green>yes)
                        #WhiteSmoke:field = ReadFieldFromCsvFile("Blinker2.csv");
                    else (<color:red>no)
                        if (input == "4") then (<color:green>yes)
                                #WhiteSmoke:field = ReadFieldFromCsvFile("Bipol.csv");
                            else (<color:red>no)
                                    #WhiteSmoke:PrintLine("Ungültige Eingabe!");
                        endif
                endif
        endif
endif
#WhiteSmoke:Simulate(field, 1000, 250);
stop
start
note right:  Program.Simulate
#LightGreen:Params(int[,] field,int iterations,int delay);
#WhiteSmoke:PrintField(field);
#WhiteSmoke:Thread.Sleep(delay);
#LightSkyBlue:int i = 0;
while (i < iterations && SumCellValues(field) > 0) is (<color:green>yes)
        #WhiteSmoke:field = CreateNextGeneration(field);
        #WhiteSmoke:PrintField(field);
        #WhiteSmoke:Thread.Sleep(delay);
:i++;
endwhile (<color:red>no)
stop
start
note right:  Program.SumCellValues
#LightGreen:Params(int[,] field);
#LightSkyBlue:int sum = 0;
#LightSkyBlue:int r = 0;
while (r < field.GetLength(0)) is (<color:green>yes)
        #LightSkyBlue:int c = 0;
        while (c < field.GetLength(1)) is (<color:green>yes)
                #WhiteSmoke:sum += field[r, c];
        :c++;
        endwhile (<color:red>no)
:r++;
endwhile (<color:red>no)
#Lavender:return sum;
stop
start
note right:  Program.GetLivingNeighbors
#LightGreen:Params(int[,] field,int row,int col);
#LightSkyBlue:int result = 0\nint rowCount = field.GetLength(0)\nint colCount = field.GetLength(1);
#LightSkyBlue:int r = row - 1;
while (r <= row + 1) is (<color:green>yes)
        #LightSkyBlue:int c = col - 1;
        while (c <= col + 1) is (<color:green>yes)
                #LightSkyBlue:int rIdx = r < 0 ? rowCount - 1 : r >= rowCount ? 0 : r;
                #LightSkyBlue:int cIdx = c < 0 ? colCount - 1 : c >= colCount ? 0 : c;
                if (rIdx == row && cIdx == col) then (<color:green>yes)
                    #WhiteSmoke:result += 0;
                    else (<color:red>no)
                        #WhiteSmoke:result += field[rIdx, cIdx];
                endif
        :c++;
        endwhile (<color:red>no)
:r++;
endwhile (<color:red>no)
#Lavender:return result;
stop
start
note right:  Program.CreateNextGeneration
#LightGreen:Params(int[,] currentField);
#LightSkyBlue:int[,] nextField = new int[currentField.GetLength(0), currentField.GetLength(1)];
#LightSkyBlue:int r = 0;
while (r < currentField.GetLength(0)) is (<color:green>yes)
        #LightSkyBlue:int c = 0;
        while (c < currentField.GetLength(1)) is (<color:green>yes)
                #LightSkyBlue:int neighbors = GetLivingNeighbors(currentField, r, c);
                if (currentField[r, c] == 0 && neighbors == 3) then (<color:green>yes)
                    #WhiteSmoke:nextField[r, c] = 1;
                    else (<color:red>no)
                        if (currentField[r, c] == 1 && neighbors < 2) then (<color:green>yes)
                            #WhiteSmoke:nextField[r, c] = 0;
                            else (<color:red>no)
                                if (currentField[r, c] == 1 && (neighbors == 2 || neighbors == 3)) then (<color:green>yes)
                                    #WhiteSmoke:nextField[r, c] = 1;
                                    else (<color:red>no)
                                        if (currentField[r, c] == 1 && neighbors > 3) then (<color:green>yes)
                                            #WhiteSmoke:nextField[r, c] = 0;
                                            else (<color:red>no)
                                                #WhiteSmoke:nextField[r, c] = currentField[r, c];
                                        endif
                                endif
                        endif
                endif
        :c++;
        endwhile (<color:red>no)
:r++;
endwhile (<color:red>no)
#Lavender:return nextField;
stop
start
note right:  Program.PrintField
#LightGreen:Params(int[,] field);
#WhiteSmoke:Console.Clear();
#WhiteSmoke:Console.ForegroundColor = ConsoleColor.Yellow;
#LightSkyBlue:int r = 0;
while (r < field.GetLength(0)) is (<color:green>yes)
        #LightSkyBlue:int c = 0;
        while (c < field.GetLength(1)) is (<color:green>yes)
                #LightSkyBlue:char sign = field[r, c] == 0 ? ' ' : '*';
                #WhiteSmoke:Print($" {sign} ");
        :c++;
        endwhile (<color:red>no)
        #WhiteSmoke:PrintLine();
:r++;
endwhile (<color:red>no)
stop
start
note right:  Program.CreateRandomField
#LightGreen:Params(int rows,int cols,int occupancy);
#LightSkyBlue:int count = 0\nint[,] field = new int[Math.Max(rows, 0), Math.Max(cols, 0)];
#WhiteSmoke:occupancy = Math.Min(occupancy, rows * cols);
while (count < occupancy) is (<color:green>yes)
        #LightSkyBlue:int r = Random.Shared.Next(0, rows);
        #LightSkyBlue:int c = Random.Shared.Next(0, cols);
        if (field[r, c] == 0) then (<color:green>yes)
                #WhiteSmoke:field[r, c] = 1;
                #WhiteSmoke:count++;
        endif
endwhile (<color:red>no)
#Lavender:return field;
stop
start
note right:  Program.ReadFieldFromCsvFile
#LightGreen:Params(string filePath);
#LightSkyBlue:bool isDefined = false\nint[,] result = new int[0, 0];
if (File.Exists(filePath)) then (<color:green>yes)
        #LightSkyBlue:string[] lines = File.ReadAllLines(filePath);
        #LightSkyBlue:int r = 0;
        while (r < lines.Length) is (<color:green>yes)
                #LightSkyBlue:string[] values = lines[r].Split(';');
                if (isDefined == false) then (<color:green>yes)
                        #WhiteSmoke:result = new int[lines.Length, values.Length];
                        #WhiteSmoke:isDefined = true;
                endif
                #LightSkyBlue:int c = 0;
                while (c < values.Length) is (<color:green>yes)
                        #WhiteSmoke:result[r, c] = int.Parse(values[c]);
                :c++;
                endwhile (<color:red>no)
        :r++;
        endwhile (<color:red>no)
endif
#Lavender:return result;
stop
footer
generated with the DiagramCreator by Prof.Gehrer
end footer
@enduml
