@startuml UMLCreator.CreateActivityDiagram
title UMLCreator.CreateActivityDiagram
start
#LightGreen:Params(string path,string source);
#LightSkyBlue:var syntaxTree = CSharpSyntaxTree.ParseText(source)\nvar syntaxRoot = syntaxTree.GetRoot()\nvar classNodes = syntaxRoot.DescendantNodes().OfType<ClassDeclarationSyntax>();
if (Path.Exists(path) == false) then (<color:green>yes)
        #WhiteSmoke:Directory.CreateDirectory(path);
endif
:iterator = classNodes.GetIterator();
while (iterator.MoveNext()) is (<color:green>yes)
:classNode = iterator.Current();
            #LightSkyBlue:var methodNodes = classNode.DescendantNodes().OfType<MethodDeclarationSyntax>();
            :iterator = methodNodes.GetIterator();
            while (iterator.MoveNext()) is (<color:green>yes)
            :methodNode = iterator.Current();
                                #LightSkyBlue:var fileName = $"{classNode.Identifier.Text}_{methodNode.Identifier.Text}.puml";
                                #LightSkyBlue:var filePath = Path.Combine(path, fileName);
                                #LightSkyBlue:var diagramData = CreateActivityDiagram(methodNode);
                                #WhiteSmoke:diagramData.Insert(0, $"@startuml {classNode.Identifier.Text}.{methodNode.Identifier.Text}");
                                #WhiteSmoke:diagramData.Insert(1, $"title {classNode.Identifier.Text}.{methodNode.Identifier.Text}");
                                #WhiteSmoke:diagramData.Insert(2, "start");
                                #WhiteSmoke:diagramData.Add("stop");
                                #WhiteSmoke:diagramData.Add("@enduml");
                                #WhiteSmoke:File.WriteAllLines(filePath, diagramData);
            endwhile (<color:red>no)
endwhile (<color:red>no)
stop
@enduml
