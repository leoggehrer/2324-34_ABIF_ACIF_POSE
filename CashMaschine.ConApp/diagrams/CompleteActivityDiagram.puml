@startuml CompleteActivityDiagram
header
generated on 09.04.2024 22:12:00
end header
title CompleteActivityDiagram
start
note right:  Program.Main
#LightGreen:Params(string[] args);
#LightSkyBlue:int MAX_INCORRECT_ENTRIES = 3\nint DEFINED_PIN = 4711\ndouble COVER_FRAME = 1000\nstring input\nbool userPinCorrect\nint machineBalance = 20000\nint userPin, userBalance = 1000\nint numberOfInvalidPins = 0\nint amount;
#WhiteSmoke:PrintLine();
#WhiteSmoke:PrintLine("**********************************");
#WhiteSmoke:PrintLine("         CASH MASHINE             ");
#WhiteSmoke:PrintLine("**********************************");
repeat
        #WhiteSmoke:PrintLine();
        #WhiteSmoke:Print("Bitte geben Sie ihren 4 stelligen PIN-Code ein: ");
        #WhiteSmoke:input = ReadLine();
        #WhiteSmoke:userPin = Convert.ToInt32(input);
        if (userPin != DEFINED_PIN) then (<color:green>yes)
                #WhiteSmoke:userPinCorrect = false;
                #WhiteSmoke:numberOfInvalidPins++;
                #WhiteSmoke:PrintLine($"Sie haben {numberOfInvalidPins} mal einen falschen PIN eingegeben.");
            else (<color:red>no)
                    #WhiteSmoke:userPinCorrect = true;
                    #WhiteSmoke:numberOfInvalidPins = 0;
        endif
repeat while (numberOfInvalidPins < MAX_INCORRECT_ENTRIES && userPinCorrect == false) is (<color:green>yes)
if (numberOfInvalidPins >= MAX_INCORRECT_ENTRIES) then (<color:green>yes)
        #WhiteSmoke:PrintLine();
        #WhiteSmoke:PrintLine("Sie haben Ihren PIN zu oft eingegeben!");
        #WhiteSmoke:PrintLine(" => Ihre Karte wird eingezogen!");
    else (<color:red>no)
        if (userPinCorrect) then (<color:green>yes)
                #LightSkyBlue:double maxAmount = Math.Min(machineBalance, userBalance + COVER_FRAME);
                #WhiteSmoke:PrintLine($"Ihr Kontostand:                 {userBalance} EUR");
                #WhiteSmoke:PrintLine($"Ihr Überziehungsrahmen:         {COVER_FRAME} EUR");
                #WhiteSmoke:PrintLine("-----------------------------------------------------");
                #WhiteSmoke:PrintLine($"maximaler Betrag                {maxAmount} EUR");
                #WhiteSmoke:PrintLine();
                #WhiteSmoke:Print("Geben Sie den Betrag ein, den Sie abheben wollen: ");
                #WhiteSmoke:input = ReadLine();
                #WhiteSmoke:amount = Convert.ToInt32(input);
                if (amount <= 0 || amount > maxAmount) then (<color:green>yes)
                        #WhiteSmoke:PrintLine("Ungültiger Betrag - bitte versuchen Sie es erneut!");
                        #WhiteSmoke:PrintLine();
                        #WhiteSmoke:Print("Geben Sie den Betrag ein, den Sie abheben wollen: ");
                        #WhiteSmoke:input = ReadLine();
                        #WhiteSmoke:amount = Convert.ToInt32(input);
                endif
                if (amount > 0 && amount <= maxAmount) then (<color:green>yes)
                        #WhiteSmoke:Print($"Soll der Betrag {amount:f2} EUR abgehoben werden [j/n]?: ");
                        #WhiteSmoke:input = ReadLine();
                        if (input.ToLower() == "j") then (<color:green>yes)
                                #WhiteSmoke:userBalance = userBalance - amount;
                                #WhiteSmoke:PrintLine($"Auszahlung des Betrages {amount:f2} EUR");
                                #WhiteSmoke:PrintLine($"Ihr neuer Kontostand: {userBalance:f2} EUR");
                        endif
                    else (<color:red>no)
                            #WhiteSmoke:PrintLine("Die Abhebung wurde ohne Auszahlung beendet!");
                endif
        endif
endif
#WhiteSmoke:PrintLine();
#WhiteSmoke:PrintLine("Press any key to exit: ");
#WhiteSmoke:ReadKey();
stop
footer
generated with the DiagramCreator by Prof.Gehrer
end footer
@enduml
