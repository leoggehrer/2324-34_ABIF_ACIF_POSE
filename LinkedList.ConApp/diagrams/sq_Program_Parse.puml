@startuml Program.Parse
title Program.Parse
participant "Parse(string input)" as Parse_p0 #LightYellow
participant "input.Split(a0,a1)" as input_Split_a0_a1 #LightGreen
participant "ObjectDiagram.Generate(a0)" as ObjectDiagram_Generate_a0 #LightGreen
participant "list.Add(a0)" as list_Add_a0 #LightGreen
participant "double.Parse(a0)" as double_Parse_a0 #LightGreen
participant "int.Parse(a0)" as int_Parse_a0 #LightGreen
participant "list.Insert(a0,a1)" as list_Insert_a0_a1 #LightGreen
participant "list.RemoveAt(a0)" as list_RemoveAt_a0 #LightGreen
participant "list.Clear()" as list_Clear #LightGreen
autonumber
Parse_p0 -[#grey]> input_Split_a0_a1 : (' ', StringSplitOptions.RemoveEmptyEntries)
input_Split_a0_a1 -[#blue]-> Parse_p0 : parts
Parse_p0 -[#grey]> ObjectDiagram_Generate_a0 : (list)
loop#LightCoral i < parts.Length
    alt#LightBlue parts[i] == "a"
        Parse_p0 -[#grey]> list_Add_a0 : (double.Parse(parts[++i]))
        else
            alt#LightBlue parts[i] == "i"
                Parse_p0 -[#grey]> int_Parse_a0 : (parts[++i])
                int_Parse_a0 -[#blue]-> Parse_p0 : idx
                Parse_p0 -[#grey]> double_Parse_a0 : (parts[++i])
                double_Parse_a0 -[#blue]-> Parse_p0 : val
                Parse_p0 -[#grey]> list_Insert_a0_a1 : (idx, val)
                else
                    alt#LightBlue parts[i] == "r"
                        Parse_p0 -[#grey]> int_Parse_a0 : (parts[++i])
                        int_Parse_a0 -[#blue]-> Parse_p0 : idx
                        Parse_p0 -[#grey]> list_RemoveAt_a0 : (idx)
                    end
            end
    end
    Parse_p0 -[#grey]> ObjectDiagram_Generate_a0 : (list)
end
Parse_p0 -[#grey]> list_Clear
Parse_p0 -[#grey]> ObjectDiagram_Generate_a0 : (list)
@enduml
