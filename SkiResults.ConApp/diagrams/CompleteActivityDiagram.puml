@startuml CompleteActivityDiagram
header
generated on 23.04.2024 13:12:33
end header
title CompleteActivityDiagram
start
note right:  Program.Main
#LightGreen:Params(string[] args);
#LightSkyBlue:Racer[] racers = ReadRacersFromCsv(FileNameResultsOne, FileNameResultsTwo);
#WhiteSmoke:RunApp(racers);
#WhiteSmoke:PrintLine();
#WhiteSmoke:PrintLine("Press enter to exit: ");
#WhiteSmoke:ReadLine();
stop
start
note right:  Program.RunApp
#LightGreen:Params(Racer[] racers);
#LightSkyBlue:bool exit;
repeat
        #WhiteSmoke:exit = false;
        #WhiteSmoke:PrintLine();
        #WhiteSmoke:PrintLine("1...Rangliste Ausgeben");
        #WhiteSmoke:PrintLine("2...Disqualifizierte Läufer ausgeben");
        #WhiteSmoke:PrintLine("3...Disqualifizierte Läufer löschen");
        #WhiteSmoke:PrintLine("4...Ergbnisse speichern");
        #WhiteSmoke:PrintLine("0...Beenden");
        #WhiteSmoke:Print("Ihre Wahl: ");
        #LightSkyBlue:string input = Console.ReadLine();
        #LightYellow:if (input == "1") then (<color:green>yes)
                #WhiteSmoke:SortRacersByTotalTime(racers);
                #WhiteSmoke:PrintRacersByRank("Rangliste:", racers);
            else (<color:red>no)
                #LightYellow:if (input == "2") then (<color:green>yes)
                        #LightSkyBlue:Racer[] disqualifiers = GetDisqualifiersRacers(racers);
                        #WhiteSmoke:PrintRacersByRank("Disqualifizierte Läufer:", disqualifiers);
                    else (<color:red>no)
                        #LightYellow:if (input == "3") then (<color:green>yes)
                                #WhiteSmoke:racers = DeleteDisqualifiersRacers(racers);
                            else (<color:red>no)
                                #LightYellow:if (input == "4") then (<color:green>yes)
                                        #WhiteSmoke:SortRacersByTotalTime(racers);
                                        #WhiteSmoke:WriteRacersToCsv("results.csv", racers);
                                    else (<color:red>no)
                                        #LightYellow:if (input == "0") then (<color:green>yes)
                                                #WhiteSmoke:exit = true;
                                        endif
                                endif
                        endif
                endif
        endif
repeat while (exit == false) is (<color:green>yes)
stop
start
note right:  Program.WriteRacersToCsv
#LightGreen:Params(string fileName,Racer[] racers);
#LightSkyBlue:List<string> lines = new List<string>();
#WhiteSmoke:lines.Add("Rang;Country;Name;TimeOne;TimeTwo;TotalTime");
#LightSkyBlue:int i = 0;
while (i < racers.Length) is (<color:green>yes)
        #LightSkyBlue:int rank = racers[i].TimeOne == 0 || racers[i].TimeTwo == 0 ? -1 : i + 1;
        #WhiteSmoke:lines.Add($"{rank};{racers[i].Country};{racers[i].Name};{racers[i].TimeOne};{racers[i].TimeTwo};{racers[i].TotalTime}");
:i++;
endwhile (<color:red>no)
#WhiteSmoke:File.WriteAllLines(fileName, lines);
stop
start
note right:  Program.ReadRacersFromCsv
#LightGreen:Params(string fileNameResultsOne,string fileNameResultsTwo);
#LightSkyBlue:Racer[] result = new Racer[0];
#LightYellow:if (File.Exists(fileNameResultsOne)) then (<color:green>yes)
        #LightSkyBlue:var lines = File.ReadAllLines(fileNameResultsOne);
        #WhiteSmoke:result = new Racer[lines.Length - 1];
        #LightSkyBlue:int i = 1;
        while (i < lines.Length) is (<color:green>yes)
                #LightSkyBlue:var parts = lines[i].Split(';');
                #LightYellow:if (parts.Length > 1) then (<color:green>yes)
                        #LightSkyBlue:var racer = new Racer
                        {
                            Country = parts[0],
                            Name = parts[1],
                            TimeOne = ConvertTimeToSeconds(parts[2]),
                        };
start
note right:  Program.GetRacerByName
#LightGreen:Params(Racer[] racers,string name);
#LightSkyBlue:Racer result = null;
#LightSkyBlue:int i = 0;
while (i < racers.Length && result == null) is (<color:green>yes)
        #LightYellow:if (racers[i].Name == name) then (<color:green>yes)
                #WhiteSmoke:result = racers[i];
        endif
:i++;
endwhile (<color:red>no)
#Lavender:return result;
stop
start
note right:  Program.SortRacersByTotalTime
#LightGreen:Params(Racer[] racers);
#LightSkyBlue:bool swapped;
repeat
        #WhiteSmoke:swapped = false;
        #LightSkyBlue:int i = 0;
        while (i < racers.Length - 1) is (<color:green>yes)
                #LightYellow:if (racers[i].TotalTime > racers[i + 1].TotalTime) then (<color:green>yes)
                        #LightSkyBlue:Racer temp = racers[i];
                        #WhiteSmoke:racers[i] = racers[i + 1];
                        #WhiteSmoke:racers[i + 1] = temp;
                        #WhiteSmoke:swapped = true;
                endif
        :i++;
        endwhile (<color:red>no)
repeat while (swapped) is (<color:green>yes)
stop
start
note right:  Program.GetDisqualifiersRacers
#LightGreen:Params(Racer[] racers);
#LightSkyBlue:List<Racer> result = new List<Racer>();
:iterator = racers.GetIterator();
while (iterator.MoveNext()) is (<color:green>yes)
:racer = iterator.Current();
            #LightYellow:if (racer.TimeOne == 0 || racer.TimeTwo == 0) then (<color:green>yes)
                    #WhiteSmoke:result.Add(racer);
            endif
endwhile (<color:red>no)
#Lavender:return result.ToArray();
stop
start
note right:  Program.DeleteDisqualifiersRacers
#LightGreen:Params(Racer[] racers);
#LightSkyBlue:List<Racer> result = new List<Racer>();
:iterator = racers.GetIterator();
while (iterator.MoveNext()) is (<color:green>yes)
:racer = iterator.Current();
            #LightYellow:if (racer.TimeOne != 0 && racer.TimeTwo != 0) then (<color:green>yes)
                    #WhiteSmoke:result.Add(racer);
            endif
endwhile (<color:red>no)
#Lavender:return result.ToArray();
stop
start
note right:  Program.PrintRacersByRank
#LightGreen:Params(string title,Racer[] racers);
#WhiteSmoke:PrintLine(title);
#WhiteSmoke:PrintLine();
#WhiteSmoke:PrintLine($"{"",-5}{"Name",-35}{"Country",-10}{"Time",-8}{ "Time",-8}{"Total Time"}");
#LightSkyBlue:int i = 0;
while (i < racers.Length) is (<color:green>yes)
        #WhiteSmoke:PrintLine($"{i + 1, -5}{racers[i].Name,-35}{racers[i].Country, -10}{racers[i].TimeOne,-8:f2}{racers[i].TimeTwo, -8:f2}{racers[i].TotalTime:f2}");
:i++;
endwhile (<color:red>no)
stop
start
note right:  Program.ConvertTimeToSeconds
#LightGreen:Params(string time);
#LightSkyBlue:double result = 0\nstring[] parts = time.Replace(":", ".").Split('.');
#LightYellow:if (parts.Length == 3) then (<color:green>yes)
        #WhiteSmoke:result = int.Parse(parts[0]) * 60;
        #WhiteSmoke:result += int.Parse(parts[1]);
        #WhiteSmoke:result += double.Parse(parts[2]) / 10.0;
    else (<color:red>no)
        #LightYellow:if (parts.Length == 2) then (<color:green>yes)
                #WhiteSmoke:result = int.Parse(parts[0]);
                #WhiteSmoke:result += double.Parse(parts[1]) / 10.0;
        endif
endif
#Lavender:return result;
stop
footer
generated with the DiagramCreator by Prof.Gehrer
end footer
@enduml
